@page "/doctors/create"
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using ePrescription.Controllers
@using ePrescription.Areas.Identity.Data
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _nav
@inject DoctorsController _p

<h3>Add Doctor</h3>
<EditForm Model="@doctor" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First Name"
                                  @bind-Value="doctor.FirstName" For="@(() => doctor.FirstName)" />
                    <MudTextField Label="Last Name"
                                  @bind-Value="doctor.LastName" For="@(() => doctor.LastName)" />
                    <MudTextField Label="Email"
                                  @bind-Value="doctor.Email" For="@(() => doctor.Email)" />
                    <MudTextField Label="Contact Number"
                                  @bind-Value="doctor.PhoneNumber" For="@(() => doctor.PhoneNumber)" />
                    <MudTextField Label="Registration Number"
                                  @bind-Value="doctor.RegistrationNo" For="@(() => doctor.RegistrationNo)" required/>
                    <MudSelect T="int" Label="Select Practice" @bind-Value="@doctor.PracticeId" Placeholder="Please Select Practice" For="@(() => doctor.PracticeId)">
                        @if (Practices == null)
                        {

                        }
                        else
                        {
                            @foreach (var s in Practices)
                            {
                                <MudSelectItem T="int" Value="s.Id">@s.Name</MudSelectItem>
                              
                            }
                        }
                    </MudSelect>
                    <MudSelect T="int" Label="Select Qualification" @bind-Value="@doctor.QualificationId" For="@(() => doctor.QualificationId)">
                        @if (Qualifications == null)
                        {

                        }
                        else
                        {
                            @foreach (var q in Qualifications)
                            {
                                <MudSelectItem T="int" Value="q.Id">
                                    @q.Description
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"> Save </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    //private User user = new User();
    private InputModel doctor = new InputModel();
    private List<Data.Practice> Practices { get; set; }
    private List<Qualification> Qualifications { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Practices = await _p.GetPracticesAsync();
        Qualifications = await _p.GetQualificationsAsync();
    }

    //private async Task GetSuburbs()
    //{
    //    Suburbs = await _p.GetSuburbsAsync();
    //}
    //private async Task GetQualifications()
    //{
    //    Qualifications = await _p.GetQualificationsAsync();
    //}

    private async Task Save()
    {
         User user = new User(doctor.FirstName, doctor.LastName, "Doctor", doctor.Email, doctor.PhoneNumber, doctor.PracticeId, doctor.QualificationId, doctor.RegistrationNo);
           var result = await _p.Create(user);

        if (result.Data == true)
        {
            _snackbar.Add("Doctor added successfully!.", Severity.Success);
            _nav.NavigateTo("/doctors");
        }
        else
        {
            _snackbar.Add("Failed to add Doctor, Please try again.", Severity.Warning);
        }
    }

    private class InputModel
    {
            [Required]
            public string FirstName { get; set; }

            [Required]
            public string LastName { get; set; }


            [Required]
            [EmailAddress]
            public string Email { get; set; }

            [Required]
            public string PhoneNumber { get; set; }

            [Required]
            public int QualificationId { get; set; }

            [Required]
            public string RegistrationNo { get; set; }

            [Required]
            public int PracticeId { get; set; }




    }
}
