@page "/doctors"
@using MudBlazor
@using ePrescription.Controllers
@using ePrescription.Areas.Identity.Data
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject DoctorsController _p;


@if(doctors == null)
{
    <p>Loading . . .</p>
}
else
{
    @if (doctors.Count() == 0)
    {
        <h4>Nothing to display</h4>
        <MudButton Variant="Variant.Filled" Color="Color.Info" Href="/doctors/create">Add Doctor</MudButton>
    }
    else
    {
                <MudTable Items="@doctors" Hover="true" >
            <ToolBarContent>
           <MudButton Variant = "Variant.Filled" Color="Color.Info" Href="/practice/new">Add Doctor</MudButton>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Contact Number</MudTh>
                <MudTh>Address Line 1</MudTh>
                <MudTh>Address Line 2</MudTh>
                <MudTh>Suburb</MudTh>
                <MudTh>Options</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="FullName">@context.FullName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="ContactNo">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="AddressLine1">@context.AddressLine1</MudTd>
                <MudTd DataLabel="AddressLine2">@context.AddressLine2</MudTd>
                <MudTd DataLabel="SuburbId">@context.Suburb.Name</MudTd>
                <MudTd>

                    <a class="btn btn-primary btn-sm" href="/practice/edit/@context.Id"><span class="oi oi-pencil" aria-hidden="true"></span></a>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@((e) => DeleteDoctor(@context.Id))" Size="Size.Large"><span class="oi oi-trash" aria-hidden="true"></span> </MudButton>
                </MudTd>

            </RowTemplate>
        </MudTable>
    }
    
}


@code {
    private List<User> doctors { get; set; }

    private string? searchString1;
    protected override async Task OnInitializedAsync()
    {

        await DoctorsList();
    }

    private bool FilterFunc1(User user) => FilterFunc(user, searchString1);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.IDNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task DeleteDoctor(string id)
    {
        //var x = new ServiceResponse<bool>();

        //if (id != null)
        //{
        //    var p = await _service.GetPracticeAsync(Convert.ToInt32(id));
        //    if (p != null)
        //    {
        //        var parameters = new DialogParameters();
        //        parameters.Add("ContentText", "Are you sure you want to delete " + p.Data.Name.ToString() + "?");
        //        parameters.Add("ButtonText", "Delete");
        //        parameters.Add("Color", Color.Error);

        //        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        //        var dialog = DialogService.Show<DeleteDialog>("Delete", parameters, options);

        //        var result = await dialog.Result;

        //        if (!result.Cancelled)
        //        {
        //            x = await _service.DeletePracticeAsync(p.Data.Id);
        //            if (x.Success == true)
        //            {
        //                _snackbar.Add(p.Data.Name + " Successfully deleted!", Severity.Error);
        //                await PracticeList();
        //            }
        //            else
        //            {
        //                _snackbar.Add(p.Message, Severity.Warning);
        //            }
        //        }

        //    }
        //}

    }


    private async Task DoctorsList()
    {
        var P = await _p.Index();

        doctors = P.Data;
    }
}
