// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ePrescription.Data;

#nullable disable

namespace ePrescription.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220804113307_MedicineRefactor")]
    partial class MedicineRefactor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ePrescription.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PharmacyId")
                        .IsUnique()
                        .HasFilter("[PharmacyId] IS NOT NULL");

                    b.HasIndex("PracticeId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("SuburbID");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abc-123-ABC-246-aec",
                            AccessFailedCount = 0,
                            AddressLine1 = "14 8th Avenue",
                            ConcurrencyStamp = "4fdd7956-b974-4ca9-9f9b-eb83d8ab7c77",
                            Discriminator = "Admin",
                            Email = "tonystark@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IDNumber = "8611262654879",
                            LastName = "Stark",
                            LockoutEnabled = false,
                            NormalizedEmail = "TONYSTARK@GMAIL.COM",
                            NormalizedUserName = "TONYSTARK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBjXrKtBER0GKQ7thVCQdHj09384hWFcan3gFhFrlmmih7myvCxoFM5tJ/wNscp4Ag==",
                            PhoneNumber = "0780509071",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "03d42390-130d-4498-8f6c-1bc003e4037d",
                            SuburbID = 1,
                            TwoFactorEnabled = false,
                            UserName = "tonystark@gmail.com"
                        },
                        new
                        {
                            Id = "abc-123-ABC-246-eee",
                            AccessFailedCount = 0,
                            AddressLine1 = "1 2th Avenue",
                            ConcurrencyStamp = "fe78f9f3-0af3-432c-b870-3bdbe00132b4",
                            Discriminator = "Doctor",
                            Email = "strange@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Doctor",
                            IDNumber = "8611223659874",
                            LastName = "Strange",
                            LockoutEnabled = false,
                            NormalizedEmail = "STRANGE@GMAIL.COM",
                            NormalizedUserName = "STRANGE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9ajUeB1rNJ+Q5aHTQrGa8Az8yyaunbxpGaba5BvZ36P6mKl8DfpXlHOpoBoo/mMQ==",
                            PhoneNumber = "0780509025",
                            PhoneNumberConfirmed = true,
                            PracticeId = 3,
                            QualificationId = 1,
                            RegistrationNo = "123456789",
                            SecurityStamp = "ca3fadf2-4338-46a3-b874-4be6c11d33d8",
                            SuburbID = 1,
                            TwoFactorEnabled = false,
                            UserName = "strange@gmail.com"
                        },
                        new
                        {
                            Id = "abc-123-ABC-246-ccc",
                            AccessFailedCount = 0,
                            AddressLine1 = "8th Avenue",
                            ConcurrencyStamp = "c990c850-935b-43f1-86c0-0d9318ae592c",
                            Discriminator = "Pharmacist",
                            Email = "parker@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IDNumber = "9911262654123",
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NormalizedEmail = "PARKER@GMAIL.COM",
                            NormalizedUserName = "PARKER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELe/bke8eyvy6/SoIyRrgZli7AqtH6RPXJShaWO4VEq4fAvzHqC0ys86Sf9Anny6IA==",
                            PharmacyId = 2,
                            PhoneNumber = "0780509071",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5fc571ea-efa4-44c6-9dff-f2c491351510",
                            SuburbID = 3,
                            TwoFactorEnabled = false,
                            UserName = "parker@gmail.com"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gqeberha",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "East London",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Makhanda",
                            ProvinceId = 1
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Contra_Indication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("SeverityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("SeverityId");

                    b.ToTable("Contra_Indications");
                });

            modelBuilder.Entity("ePrescription.Data.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICD10_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("ePrescription.Data.Dosage_Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dosage_Form");
                });

            modelBuilder.Entity("ePrescription.Data.History_Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Medical_HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Medical_HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("History_Medication");
                });

            modelBuilder.Entity("ePrescription.Data.Ingredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.Med_Ingredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Med_Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.Medical_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int?>("Medical_HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("Medical_HistoryId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Medical_History");
                });

            modelBuilder.Entity("ePrescription.Data.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Dosage_FormId")
                        .HasColumnType("int");

                    b.Property<int>("MedSizeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduledId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dosage_FormId");

                    b.HasIndex("MedSizeId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("ePrescription.Data.MedSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("ePrescription.Data.Patient_Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientsId");

                    b.HasIndex("PatientId");

                    b.ToTable("Patient_Allergies");
                });

            modelBuilder.Entity("ePrescription.Data.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuburbID");

                    b.ToTable("Pharmacy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine1 = "1 Pharmacy Street",
                            ContactNo = "0475557456",
                            Email = "info@pharmacy.com",
                            LicenceNo = "12365477",
                            Name = "Pharmacy",
                            SuburbID = 1
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeNo")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuburbID");

                    b.ToTable("Practice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine1 = "1 Practice Street",
                            ContactNo = "0456987456",
                            Email = "info@practice.com",
                            Name = "Practice",
                            PracticeNo = "12365477",
                            SuburbID = 1
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription_Details", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("PharmacistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Repetition")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacistId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Prescription_Details");
                });

            modelBuilder.Entity("ePrescription.Data.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Eastern Cape"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Qualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Degree"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Masters"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("ePrescription.Data.Severity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Severity");
                });

            modelBuilder.Entity("ePrescription.Data.Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Suburb");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            Name = "Summerstrand",
                            PostalCode = "6001"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            Name = "Humewood",
                            PostalCode = "6002"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Walmer",
                            PostalCode = "6003"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "c55f0158-44ef-4fc6-8a31-cfd3584056e1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "8ec3f5f2-4bec-4d3d-ac3c-3dd05cff8942",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "49e36338-da75-4d04-95a6-c1bf7a34cd7a",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "13c4a3f1-863c-4490-bc21-ba9da8f2d011",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "abc-123-ABC-246-aec",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "abc-123-ABC-246-eee",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "abc-123-ABC-246-ccc",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ePrescription.Areas.Identity.Data.User", b =>
                {
                    b.HasOne("ePrescription.Data.Pharmacy", "Pharmacy")
                        .WithOne("Pharmacist")
                        .HasForeignKey("ePrescription.Areas.Identity.Data.User", "PharmacyId");

                    b.HasOne("ePrescription.Data.Practice", "Practice")
                        .WithMany()
                        .HasForeignKey("PracticeId");

                    b.HasOne("ePrescription.Data.Qualification", "Qualification")
                        .WithMany("Doctors")
                        .HasForeignKey("QualificationId");

                    b.HasOne("ePrescription.Data.Suburb", "Suburb")
                        .WithMany("Users")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Practice");

                    b.Navigation("Qualification");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("ePrescription.Data.City", b =>
                {
                    b.HasOne("ePrescription.Data.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ePrescription.Data.Contra_Indication", b =>
                {
                    b.HasOne("ePrescription.Data.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Ingredients", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Severity", "Severity")
                        .WithMany("Contra_Indications")
                        .HasForeignKey("SeverityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Ingredient");

                    b.Navigation("Severity");
                });

            modelBuilder.Entity("ePrescription.Data.History_Medication", b =>
                {
                    b.HasOne("ePrescription.Data.Medical_History", "Medical_History")
                        .WithMany()
                        .HasForeignKey("Medical_HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medical_History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ePrescription.Data.Med_Ingredients", b =>
                {
                    b.HasOne("ePrescription.Data.Ingredients", "Ingredient")
                        .WithMany("Med_Ingredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medicine", "Medicine")
                        .WithMany("Med_Ingredients")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ePrescription.Data.Medical_History", b =>
                {
                    b.HasOne("ePrescription.Data.Diagnosis", "Diagnosis")
                        .WithMany("Medical_Histories")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medical_History", null)
                        .WithMany("History")
                        .HasForeignKey("Medical_HistoryId");

                    b.HasOne("ePrescription.Data.Medicine", null)
                        .WithMany("History")
                        .HasForeignKey("MedicineId");

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Patient")
                        .WithOne("Medical_History")
                        .HasForeignKey("ePrescription.Data.Medical_History", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ePrescription.Data.Medicine", b =>
                {
                    b.HasOne("ePrescription.Data.Dosage_Form", "Dosage_Form")
                        .WithMany("Medicines")
                        .HasForeignKey("Dosage_FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.MedSize", "Size")
                        .WithMany("Medicines")
                        .HasForeignKey("MedSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Schedule", "Schedule")
                        .WithMany("Medicines")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dosage_Form");

                    b.Navigation("Schedule");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ePrescription.Data.Patient_Allergy", b =>
                {
                    b.HasOne("ePrescription.Data.Ingredients", "Ingredients")
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ePrescription.Data.Pharmacy", b =>
                {
                    b.HasOne("ePrescription.Data.Suburb", "Suburb")
                        .WithMany("Pharmacies")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("ePrescription.Data.Practice", b =>
                {
                    b.HasOne("ePrescription.Data.Suburb", "Suburb")
                        .WithMany("Practices")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription_Details", b =>
                {
                    b.HasOne("ePrescription.Data.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Pharmacist")
                        .WithMany()
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Pharmacist");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("ePrescription.Data.Suburb", b =>
                {
                    b.HasOne("ePrescription.Data.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePrescription.Areas.Identity.Data.User", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Medical_History");
                });

            modelBuilder.Entity("ePrescription.Data.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("ePrescription.Data.Diagnosis", b =>
                {
                    b.Navigation("Medical_Histories");
                });

            modelBuilder.Entity("ePrescription.Data.Dosage_Form", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ePrescription.Data.Ingredients", b =>
                {
                    b.Navigation("Med_Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.Medical_History", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("ePrescription.Data.Medicine", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Med_Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.MedSize", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ePrescription.Data.Pharmacy", b =>
                {
                    b.Navigation("Pharmacist");
                });

            modelBuilder.Entity("ePrescription.Data.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ePrescription.Data.Qualification", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ePrescription.Data.Schedule", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ePrescription.Data.Severity", b =>
                {
                    b.Navigation("Contra_Indications");
                });

            modelBuilder.Entity("ePrescription.Data.Suburb", b =>
                {
                    b.Navigation("Pharmacies");

                    b.Navigation("Practices");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
