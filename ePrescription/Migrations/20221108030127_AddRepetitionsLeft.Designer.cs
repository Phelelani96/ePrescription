// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ePrescription.Data;

#nullable disable

namespace ePrescription.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221108030127_AddRepetitionsLeft")]
    partial class AddRepetitionsLeft
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ePrescription.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PracticeId")
                        .HasColumnType("int");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("PracticeId");

                    b.HasIndex("QualificationId");

                    b.HasIndex("SuburbID");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abc-123-ABC-246-aec",
                            AccessFailedCount = 0,
                            AddressLine1 = "14 8th Avenue",
                            ConcurrencyStamp = "77344e7b-186b-46f1-9bba-0a316987adb5",
                            Discriminator = "Admin",
                            Email = "tonystark@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IDNumber = "8611262654879",
                            LastName = "Stark",
                            LockoutEnabled = false,
                            NormalizedEmail = "TONYSTARK@GMAIL.COM",
                            NormalizedUserName = "TONYSTARK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKJBaOVGqS5OhmJq5HNEJJTMa80S9FoL1KZ71yjDeUS8PrmwfFbhv4npPmlWbvwlkQ==",
                            PhoneNumber = "0780509071",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "fa473160-b38c-4d15-bf69-1f4ae2866246",
                            Status = "Active",
                            SuburbID = 1,
                            TwoFactorEnabled = false,
                            UserName = "tonystark@gmail.com"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gqeberha",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "Johannesburg",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bhisho",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Polokwane",
                            ProvinceId = 6
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bloemfontein",
                            ProvinceId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mbombela",
                            ProvinceId = 7
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mahikeng",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kimberley",
                            ProvinceId = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cape Town",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Pietermarizburg",
                            ProvinceId = 9
                        },
                        new
                        {
                            Id = 11,
                            Name = "Durban",
                            ProvinceId = 9
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Contra_Indication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("IngredientId");

                    b.ToTable("Contra_Indications");
                });

            modelBuilder.Entity("ePrescription.Data.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICD10_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Attention Deficit Disorder",
                            ICD10_Code = "F90.9"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Hyperthyroidism",
                            ICD10_Code = "E05.9"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Migraine",
                            ICD10_Code = "G43.909"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Back Pain",
                            ICD10_Code = "M54.9"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Hypertension",
                            ICD10_Code = "I10.9"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Asthma ",
                            ICD10_Code = "J45.909"
                        },
                        new
                        {
                            Id = 7,
                            Description = "High Cholesterol",
                            ICD10_Code = "E78.5"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Dosage_Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dosage_Form");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tablet"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Capsule"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Suspension"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Syrup"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lotion"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Spray"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Gel"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Suppository"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Injection"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Drops"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.History_Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Medical_HistoryId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Medical_HistoryId");

                    b.HasIndex("MedicineId");

                    b.ToTable("History_Medication");
                });

            modelBuilder.Entity("ePrescription.Data.Ingredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Methylphenidate HCI "
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ergotamine tartare"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cyclizine HCI"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Caffeine Hydrate"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Paracetamol"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Codeine Phosphate"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Caffeine"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Doxylamine Succinate"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Aspirin"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Ibuprofen"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Phenazone"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Benzocaine"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Glycerine"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Carbimazole"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Metoprolol Tartrate "
                        },
                        new
                        {
                            Id = 16,
                            Description = "Doxazosin"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Atorvastatin"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Medicine1Id")
                        .HasColumnType("int");

                    b.Property<int>("Medicine2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Medicine1Id");

                    b.HasIndex("Medicine2Id");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("ePrescription.Data.Med_Ingredients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Med_Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.Medical_History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Medical_History");
                });

            modelBuilder.Entity("ePrescription.Data.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Dosage_FormId")
                        .HasColumnType("int");

                    b.Property<string>("MedSizeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Dosage_FormId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("ePrescription.Data.MedSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("ePrescription.Data.Patient_Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientsId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientsId");

                    b.HasIndex("PatientId");

                    b.ToTable("Patient_Allergies");
                });

            modelBuilder.Entity("ePrescription.Data.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacistId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuburbID");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("ePrescription.Data.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeNo")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuburbID");

                    b.ToTable("Practice");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription_Details", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("PharmacistId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Repetition")
                        .HasColumnType("int");

                    b.Property<int>("RepetitionLeft")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacistId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Prescription_Details");
                });

            modelBuilder.Entity("ePrescription.Data.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Western Cape"
                        },
                        new
                        {
                            Id = 2,
                            Name = "North West"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gauteng"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Free State"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Limpopo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Northern Cape"
                        },
                        new
                        {
                            Id = 9,
                            Name = "KwaZulu-Natal"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Qualification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Degree"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Masters"
                        });
                });

            modelBuilder.Entity("ePrescription.Data.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("ePrescription.Data.Severity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Severity");
                });

            modelBuilder.Entity("ePrescription.Data.Suburb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Suburb");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 7,
                            Name = "Kamagugu",
                            PostalCode = "1200"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 11,
                            Name = "Essenwood",
                            PostalCode = "4001"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            Name = "Bridgemead",
                            PostalCode = "6025"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 11,
                            Name = "Kenville",
                            PostalCode = "4051"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 1,
                            Name = "Humewood",
                            PostalCode = "6001"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 11,
                            Name = "Cato Manor",
                            PostalCode = "4091"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 1,
                            Name = "Algoa Park",
                            PostalCode = "6001"
                        },
                        new
                        {
                            Id = 8,
                            CityId = 11,
                            Name = "Musgrave",
                            PostalCode = "4001"
                        },
                        new
                        {
                            Id = 9,
                            CityId = 6,
                            Name = "Barberton",
                            PostalCode = "1300"
                        },
                        new
                        {
                            Id = 10,
                            CityId = 11,
                            Name = "Bluff",
                            PostalCode = "4052"
                        },
                        new
                        {
                            Id = 11,
                            CityId = 1,
                            Name = "Cotswold",
                            PostalCode = "6045"
                        },
                        new
                        {
                            Id = 12,
                            CityId = 11,
                            Name = "Glenmore",
                            PostalCode = "4001"
                        },
                        new
                        {
                            Id = 13,
                            CityId = 6,
                            Name = "Riverside",
                            PostalCode = "1226"
                        },
                        new
                        {
                            Id = 14,
                            CityId = 1,
                            Name = "Lorraine",
                            PostalCode = "6070"
                        },
                        new
                        {
                            Id = 15,
                            CityId = 11,
                            Name = "Kwamashu",
                            PostalCode = "4359"
                        },
                        new
                        {
                            Id = 16,
                            CityId = 11,
                            Name = "Inanda",
                            PostalCode = "4309"
                        },
                        new
                        {
                            Id = 17,
                            CityId = 1,
                            Name = "Struandale",
                            PostalCode = "6001"
                        },
                        new
                        {
                            Id = 18,
                            CityId = 6,
                            Name = "Valencia Park",
                            PostalCode = "1201"
                        },
                        new
                        {
                            Id = 19,
                            CityId = 11,
                            Name = "Tongaat",
                            PostalCode = "4399"
                        },
                        new
                        {
                            Id = 20,
                            CityId = 11,
                            Name = "Greyville",
                            PostalCode = "4001"
                        },
                        new
                        {
                            Id = 21,
                            CityId = 1,
                            Name = "Malabar",
                            PostalCode = "6020"
                        },
                        new
                        {
                            Id = 22,
                            CityId = 1,
                            Name = "Summerstrand",
                            PostalCode = "6001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "18bd4fea-4f6c-4aeb-a1b6-c3fef6f3e20e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "aeca2e40-6a56-4adb-958e-69df6d30000a",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "e7d4c14e-f8b1-4d31-802e-b2b40570fcad",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "d34735d5-0895-4b88-ab9e-07da8ccf978d",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "abc-123-ABC-246-aec",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "abc-123-ABC-246-eee",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ePrescription.Areas.Identity.Data.User", b =>
                {
                    b.HasOne("ePrescription.Data.Pharmacy", "Pharmacy")
                        .WithMany("users")
                        .HasForeignKey("PharmacyId");

                    b.HasOne("ePrescription.Data.Practice", "Practice")
                        .WithMany("Doctor")
                        .HasForeignKey("PracticeId");

                    b.HasOne("ePrescription.Data.Qualification", "Qualification")
                        .WithMany("Doctors")
                        .HasForeignKey("QualificationId");

                    b.HasOne("ePrescription.Data.Suburb", "Suburb")
                        .WithMany("Users")
                        .HasForeignKey("SuburbID");

                    b.Navigation("Pharmacy");

                    b.Navigation("Practice");

                    b.Navigation("Qualification");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("ePrescription.Data.City", b =>
                {
                    b.HasOne("ePrescription.Data.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ePrescription.Data.Contra_Indication", b =>
                {
                    b.HasOne("ePrescription.Data.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Ingredients", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("ePrescription.Data.History_Medication", b =>
                {
                    b.HasOne("ePrescription.Data.Medical_History", "Medical_History")
                        .WithMany("History")
                        .HasForeignKey("Medical_HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medical_History");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ePrescription.Data.Interaction", b =>
                {
                    b.HasOne("ePrescription.Data.Medicine", "Medicine1")
                        .WithMany()
                        .HasForeignKey("Medicine1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medicine", "Medicine2")
                        .WithMany()
                        .HasForeignKey("Medicine2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine1");

                    b.Navigation("Medicine2");
                });

            modelBuilder.Entity("ePrescription.Data.Med_Ingredients", b =>
                {
                    b.HasOne("ePrescription.Data.Ingredients", "Ingredient")
                        .WithMany("Med_Ingredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medicine", "Medicine")
                        .WithMany("Med_Ingredients")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ePrescription.Data.Medical_History", b =>
                {
                    b.HasOne("ePrescription.Data.Diagnosis", "Diagnosis")
                        .WithMany("Medical_Histories")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Medicine", null)
                        .WithMany("History")
                        .HasForeignKey("MedicineId");

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Patient")
                        .WithOne("Medical_History")
                        .HasForeignKey("ePrescription.Data.Medical_History", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ePrescription.Data.Medicine", b =>
                {
                    b.HasOne("ePrescription.Data.Dosage_Form", "Dosage_Form")
                        .WithMany("Medicines")
                        .HasForeignKey("Dosage_FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Schedule", "Schedule")
                        .WithMany("Medicines")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dosage_Form");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ePrescription.Data.Patient_Allergy", b =>
                {
                    b.HasOne("ePrescription.Data.Ingredients", "Ingredients")
                        .WithMany()
                        .HasForeignKey("IngredientsId");

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredients");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ePrescription.Data.Pharmacy", b =>
                {
                    b.HasOne("ePrescription.Data.Suburb", "Suburb")
                        .WithMany("Pharmacies")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("ePrescription.Data.Practice", b =>
                {
                    b.HasOne("ePrescription.Data.Suburb", "Suburb")
                        .WithMany("Practices")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ePrescription.Data.Prescription_Details", b =>
                {
                    b.HasOne("ePrescription.Data.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", "Pharmacist")
                        .WithMany()
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Data.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Pharmacist");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("ePrescription.Data.Suburb", b =>
                {
                    b.HasOne("ePrescription.Data.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ePrescription.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePrescription.Areas.Identity.Data.User", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Medical_History");
                });

            modelBuilder.Entity("ePrescription.Data.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("ePrescription.Data.Diagnosis", b =>
                {
                    b.Navigation("Medical_Histories");
                });

            modelBuilder.Entity("ePrescription.Data.Dosage_Form", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ePrescription.Data.Ingredients", b =>
                {
                    b.Navigation("Med_Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.Medical_History", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("ePrescription.Data.Medicine", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Med_Ingredients");
                });

            modelBuilder.Entity("ePrescription.Data.Pharmacy", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("ePrescription.Data.Practice", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ePrescription.Data.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ePrescription.Data.Qualification", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ePrescription.Data.Schedule", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ePrescription.Data.Suburb", b =>
                {
                    b.Navigation("Pharmacies");

                    b.Navigation("Practices");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
