@page "/medical-history/create/{id}"
@using ePrescription.Data
@using ePrescription.Data.Viewmodels
@using ePrescription.Services

@inject IMedicalHistoryService _service
@inject NavigationManager _nav
@inject ISnackbar _snack
<h3>Add Medication History</h3>

<EditForm Model="@history" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    @if (Diagnoses != null)
                    {
                        <MudSelect T="int" Label="Disease" @bind-Value="@history.DiagnosisId" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" id="Disease" For="@(() => history.DiagnosisId)">
                            @foreach (var d in Diagnoses)
                            {
                                <MudSelectItem Value="@d.Id" T="int">@d.Description</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    <MudTextField T="DateTime" @bind-Value="@history.DiagnosisDate" Format="yyyy-MM-dd" Label="Date" InputType="InputType.Date" />
                    @if (history.Medication != null)
                    {
                        @foreach (var med in history.Medication)
                        {
                            <MudItem xs="4" sm="4">
                                <MudCheckBox @bind-Checked="@med.IsChecked" Label="@med.Name"></MudCheckBox>
                            </MudItem>
                        }
                    }
                
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"> Save </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>



@code {
    [Parameter]
    public string? id {get;set;}

    private List<Medicine> Medicines { get; set; } 
    //private List<Medicine> medic { get; set; }
    //private Medicine med { get; set; }
    private List<Diagnosis> Diagnoses { get; set; }
    //private Medical_History history = new Medical_History();

    private PatientHistoryViewModel history = new PatientHistoryViewModel();

    protected override async Task OnInitializedAsync()
    {
        await GetDiagnosis();
        await GetMedicine();
        history.PatientId = id;
        history.Medication = Medicines.Select(m => new CheckItem()
        {
            Id = m.Id,
            Name = m.Name,
            IsChecked = false
        }).ToList(); ;

    }
    //private void GetMedicine()
    //{

    //}
    //private string GetMultiSelectionText(List<string> x)
    //{
    //    return $"{x.Count} Medicine{(x.Count > 1 ? "s have":" has")} been selected";
    //}



    private async Task HandleSubmit()
    {
        var x = new ServiceResponse<bool>();
        if(Medicines == null)
        {

        }
        else
        {
            if(id != null)
            {
                history.PatientId = id;
                //history.DiagnosisDate = System.DateTime.Today;

                x = await _service.AddMedicalHistoryAsync(history);
                if(x.Data == true)
                {
                    _snack.Add(x.Message, MudBlazor.Severity.Success);
                    _nav.NavigateTo("/patients/details/" + id);
                }
                else
                {
                    _snack.Add(x.Message, MudBlazor.Severity.Warning);
                }

            }
        }
    }

    private async Task GetDiagnosis()
    {
        Diagnoses = await _service.GetDiagnosesAsync();
    }

    private async Task GetMedicine()
    {
        Medicines = await _service.GetMedicinesAsync();
    }
}