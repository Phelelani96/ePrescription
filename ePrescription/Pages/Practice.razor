@page "/practice-list"
@using ePrescription.Services
@using ePrescription.Pages.Shared

@inject PracticeService _service
@inject IDialogService DialogService
@inject ISnackbar _snackbar

<h3>Practice List</h3>

<MudTable Items="@practices" Hover="true" >
    <ToolBarContent>
       <MudButton Variant = "Variant.Filled" Color="Color.Info" Href="/practice/new">Add Practice</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Contact Number</MudTh>
        <MudTh>Address Line 1</MudTh>
        <MudTh>Address Line 2</MudTh>
        <MudTh>Suburb</MudTh>
        <MudTh>Options</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="ContactNo">@context.ContactNo</MudTd>
        <MudTd DataLabel="AddressLine1">@context.AddressLine1</MudTd>
        <MudTd DataLabel="AddressLine2">@context.AddressLine2</MudTd>
        <MudTd DataLabel="SuburbId">@context.SuburbID</MudTd>
        <MudTd>
            <a class="btn btn-primary btn-sm" href="/practice/edit/@context.Id">Update</a>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@((e) => DeletePractice(@context.Id))">Delete</MudButton>
        </MudTd>
         
    </RowTemplate>
</MudTable>

@code {
    private string? searchString1;
    private List<Data.Practice> practices { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await PracticeList();
    }

    private async Task DeletePractice(int? id)
    {
        bool x;
        if(id != null)
        {
            var p = await _service.GetPracticeAsync(Convert.ToInt32(id));
            if(p != null)
            {
                var parameters = new DialogParameters();
                parameters.Add("ContentText", "Are you sure you want to delete " + p.Name.ToString() + "?");
                parameters.Add("ButtonText", "Delete");
                parameters.Add("Color", Color.Error);

                var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

                var dialog =  DialogService.Show<DeleteDialog>("Delete", parameters, options);

                var result = await dialog.Result;

                if (!result.Cancelled)
                {
                    x = await _service.DeletePracticeAsync(p.Id);
                    if(x == true)
                    {
                        _snackbar.Add(p.Name + " Successfully deleted!", Severity.Error);
                        await PracticeList();
                    }
                    else
                    {
                        _snackbar.Add("Failed to remove practice, please try again", Severity.Warning);
                    }
                }

            }
        }

    }

    private async Task PracticeList()
    {
        practices = await _service.GetAll();
    }
}